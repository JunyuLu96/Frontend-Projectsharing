{"ast":null,"code":"var _jsxFileName = \"/Users/luxx/Desktop/frontend-projectsharing/src/component/comapny/CompanyProjectComponent.js\";\nimport React, { Component } from \"react\";\nimport CompanyService from \"../service/CompanyService\";\nimport { Button, Col, Form, Input, message, Row } from \"antd\";\nimport { InboxOutlined, PlusCircleOutlined } from \"@ant-design/icons\";\nimport Dragger from \"antd/es/upload/Dragger\";\nimport Divider from \"antd/es/divider\";\nimport ContainerOutlined from \"@ant-design/icons/lib/icons/ContainerOutlined\";\nimport List from \"antd/es/list\";\nimport Skeleton from \"antd/es/skeleton\";\nimport Avatar from \"antd/es/avatar\";\nimport CompanyStudentModal from \"./CompanyStudentModal\";\n\nclass CompanyProjectComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.finishProject = () => {\n      CompanyService.finishCompany(this.state.id).then(response => {\n        message.success(\"finished\");\n      }).catch(error => {\n        message.error(\"failed\");\n      });\n    };\n\n    this.refresh = () => {\n      CompanyService.getProjectsById(this.state.id).then(response => {\n        this.setState({\n          description: response.data.description,\n          projectUrl: response.data.projectUrl,\n          projectName: response.data.projectName,\n          status: response.data.status\n        });\n      });\n      CompanyService.getAppliedStudentsOfProject(this.state.id).then(response => {\n        this.setState({\n          applicants: response.data\n        });\n      });\n    };\n\n    this.handelNameChange = e => {\n      this.setState({\n        projectName: e.target.value\n      });\n    };\n\n    this.handelDescriptionChange = e => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.update = () => {\n      const {\n        projectName,\n        description,\n        newFile\n      } = this.state;\n      const formData = new FormData();\n      newFile.forEach(file => {\n        formData.append('file', file);\n      });\n      this.setState({\n        uploading: true\n      });\n      formData.append('projectName', projectName);\n      formData.append('description', description);\n      formData.append('projectId', this.state.id);\n      CompanyService.updateProject(formData).then(response => {\n        message.success(\"update successfully\");\n        this.setState({\n          newFile: [],\n          uploading: false\n        });\n        this.refresh();\n      }).catch(error => {\n        this.setState({\n          uploading: false\n        });\n        message.error('upload failed.');\n      });\n      this.refresh();\n    };\n\n    this.state = {\n      id: this.props.match.params.id,\n      description: '',\n      fileList: '',\n      projectUrl: '',\n      projectName: '',\n      status: '',\n      applicants: [],\n      newFile: [],\n      refresh: '',\n      uploading: false\n    };\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  render() {\n    const {\n      newFile,\n      description,\n      projectName,\n      status,\n      id,\n      uploading\n    } = this.state;\n    const props = {\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.newFile.indexOf(file);\n          const newFileList = state.newFile.slice();\n          newFileList.splice(index, 1);\n          return {\n            newFile: newFileList\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          newFile: [...state.newFile, file]\n        }));\n        return false;\n      },\n      newFile,\n      accept: \".doc, .docx, .pdf\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ant-card-bordered project-detail-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      layout: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      gutter: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"Project Name\",\n      label: \"Project Name\",\n      rules: [{\n        required: true,\n        message: 'Please enter project name'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Please enter project name\",\n      value: projectName,\n      onChange: this.handelNameChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      span: 12,\n      push: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }, \"status: \", status, \" \\xA0\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      size: \"small\",\n      onClick: this.finishProject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 37\n      }\n    }, \"finish project\"))), /*#__PURE__*/React.createElement(Row, {\n      gutter: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"description\",\n      label: \"Description\",\n      rules: [{\n        required: true,\n        message: 'description of the project'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input.TextArea, {\n      rows: 4,\n      placeholder: \"please enter the description\",\n      value: description,\n      onChange: this.handelDescriptionChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      gutter: [0, 30],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.projectUrl,\n      className: \"resume-font\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContainerOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 89\n      }\n    }), \" \\xA0 detail.pdf\")), /*#__PURE__*/React.createElement(Row, {\n      gutter: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Dragger, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(InboxOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ant-upload-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 41\n      }\n    }, \"Click or drag file to this area to upload\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ant-upload-hint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 41\n      }\n    }, \"Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files\")))), /*#__PURE__*/React.createElement(Row, {\n      gutter: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      push: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      size: \"large\",\n      onClick: this.update,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 37\n      }\n    }, uploading ? 'Uploading' : 'Start Upload')))))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      className: \"demo-loadmore-list\",\n      itemLayout: \"horizontal\",\n      dataSource: this.state.applicants.sort((a, b) => a.student_id - b.student_id),\n      renderItem: item => /*#__PURE__*/React.createElement(List.Item, {\n        actions: [/*#__PURE__*/React.createElement(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 43\n          }\n        }, \"status: \", item.status), /*#__PURE__*/React.createElement(\"a\", {\n          onClick: e => {\n            CompanyService.approveApplication(this.state.id, item.student_id).then(response => {\n              message.success(\"success\");\n              this.refresh();\n            }).catch(error => {\n              message.error(\"failed\");\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 37\n          }\n        }, \"accept\"), /*#__PURE__*/React.createElement(\"a\", {\n          onClick: e => {\n            if (item.status == \"pending\") {\n              CompanyService.rejectApplication(this.state.id, item.student_id).then(response => {\n                message.success(\"success\");\n                this.refresh();\n              }).catch(error => {\n                message.error(\"failed\");\n              });\n            } else {\n              message.error(\"You can't decline a already approved or declined student\");\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 53\n          }\n        }, \"decline\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Skeleton, {\n        avatar: true,\n        title: false,\n        loading: item.loading,\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n        avatar: /*#__PURE__*/React.createElement(Avatar, {\n          src: item.student.iconUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 41\n          }\n        }),\n        title: /*#__PURE__*/React.createElement(CompanyStudentModal, {\n          student: item,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 44\n          }\n        }),\n        description: item.student.institution,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default CompanyProjectComponent;","map":{"version":3,"sources":["/Users/luxx/Desktop/frontend-projectsharing/src/component/comapny/CompanyProjectComponent.js"],"names":["React","Component","CompanyService","Button","Col","Form","Input","message","Row","InboxOutlined","PlusCircleOutlined","Dragger","Divider","ContainerOutlined","List","Skeleton","Avatar","CompanyStudentModal","CompanyProjectComponent","constructor","props","finishProject","finishCompany","state","id","then","response","success","catch","error","refresh","getProjectsById","setState","description","data","projectUrl","projectName","status","getAppliedStudentsOfProject","applicants","handelNameChange","e","target","value","handelDescriptionChange","update","newFile","formData","FormData","forEach","file","append","uploading","updateProject","match","params","fileList","componentDidMount","render","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","accept","required","bind","sort","a","b","student_id","item","approveApplication","rejectApplication","loading","student","iconUrl","institution"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport CompanyService from \"../service/CompanyService\";\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {InboxOutlined, PlusCircleOutlined} from \"@ant-design/icons\";\nimport Dragger from \"antd/es/upload/Dragger\";\nimport Divider from \"antd/es/divider\";\nimport ContainerOutlined from \"@ant-design/icons/lib/icons/ContainerOutlined\";\nimport List from \"antd/es/list\";\nimport Skeleton from \"antd/es/skeleton\";\nimport Avatar from \"antd/es/avatar\";\nimport CompanyStudentModal from \"./CompanyStudentModal\";\n\nclass CompanyProjectComponent extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            description: '',\n            fileList: '',\n            projectUrl: '',\n            projectName:'',\n            status:'',\n            applicants: [],\n            newFile:[],\n            refresh: '',\n            uploading: false,\n        }\n\n    }\n\n    finishProject =() => {\n        CompanyService.finishCompany(this.state.id).then(response => {\n            message.success(\"finished\")\n        }).catch(error => {\n            message.error(\"failed\")\n        })\n    }\n\n    refresh= () => {\n        CompanyService.getProjectsById(this.state.id).then(response => {\n            this.setState({\n                description: response.data.description,\n                projectUrl:response.data.projectUrl,\n                projectName: response.data.projectName,\n                status: response.data.status,\n            })\n        })\n\n        CompanyService.getAppliedStudentsOfProject(this.state.id).then(response => {\n            this.setState({\n                applicants: response.data\n            })\n        });\n    }\n    componentDidMount() {\n        this.refresh();\n    }\n\n    handelNameChange = (e) => {\n        this.setState({\n            projectName: e.target.value\n        })\n    }\n\n    handelDescriptionChange = (e) => {\n        this.setState({\n            description: e.target.value\n        })\n    }\n\n    update = () => {\n        const {projectName, description, newFile} = this.state;\n        const formData = new FormData();\n        newFile.forEach(file => {\n            formData.append('file', file);\n        });\n        this.setState({\n            uploading: true,\n        });\n        formData.append('projectName', projectName);\n        formData.append('description', description);\n        formData.append('projectId', this.state.id);\n        CompanyService.updateProject(formData).then(response => {\n            message.success(\"update successfully\")\n            this.setState({\n                newFile: [],\n                uploading: false,\n            });\n            this.refresh();\n        }).catch(error => {\n            this.setState({\n                uploading: false,\n            })\n            message.error('upload failed.');\n        })\n        this.refresh();\n    };\n\n    render() {\n\n        const {newFile, description,projectName, status, id, uploading} = this.state;\n        const props = {\n\n            onRemove: file => {\n                this.setState(state => {\n                    const index = state.newFile.indexOf(file);\n                    const newFileList = state.newFile.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        newFile: newFileList,\n                    };\n                });\n            },\n            beforeUpload: file => {\n                this.setState(state => ({\n                    newFile: [...state.newFile, file],\n                }));\n                return false;\n            },\n            newFile,\n            accept: \".doc, .docx, .pdf\"\n        };\n\n        return (\n            <div className=\"ant-card-bordered project-detail-container\">\n                <br/><br/>\n                <div>\n                        <Form\n                            layout=\"vertical\"\n                        >\n                            <Row gutter={16}>\n                                <Col span={12}>\n\n                                    <Form.Item\n                                        name=\"Project Name\"\n                                        label=\"Project Name\"\n                                        rules={[\n                                            { required: true, message: 'Please enter project name' }\n                                        ]}\n                                    >\n\n                                        <Input placeholder=\"Please enter project name\" value={projectName} onChange={this.handelNameChange.bind(this)}/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} push={4}>\n                                    status: {status} &nbsp;\n                                    <br/>\n                                    <br/>\n                                    <Button type=\"primary\"  size=\"small\" onClick={this.finishProject}>\n                                        finish project\n                                    </Button>\n                                </Col>\n\n                            </Row>\n                            <Row gutter={16}>\n                                <Col span={24}>\n                                    <Form.Item\n                                        name=\"description\"\n                                        label=\"Description\"\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'description of the project',\n                                            },\n                                        ]}\n                                    >\n                                        <Input.TextArea rows={4} placeholder=\"please enter the description\" value={description}\n                                                        onChange={this.handelDescriptionChange.bind(this)}/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row gutter={[0, 30]}>\n                                <a href={this.state.projectUrl} className=\"resume-font\"><ContainerOutlined /> &nbsp; detail.pdf</a>\n                            </Row>\n                            <Row gutter={30}>\n                                <Col span={24}>\n                                    <Dragger {...props} >\n                                        <p className=\"ant-upload-drag-icon\">\n                                            <InboxOutlined />\n                                        </p>\n                                        <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                                        <p className=\"ant-upload-hint\">\n                                            Support for a single or bulk upload. Strictly prohibit from uploading company data or other\n                                            band files\n                                        </p>\n                                    </Dragger>\n                                </Col>\n\n                            </Row>\n                            <Row gutter={30}>\n                                <Col push={20}>\n                                    <Form.Item\n                                    >\n                                        <br/>\n                                        <br/>\n                                    <Button type=\"primary\" size=\"large\" onClick={this.update}>\n                                        {uploading ? 'Uploading' : 'Start Upload'}\n                                    </Button>\n                                </Form.Item>\n                                </Col>\n                            </Row>\n\n                        </Form>\n                </div>\n                <Divider />\n\n                <List\n                    className=\"demo-loadmore-list\"\n                    itemLayout=\"horizontal\"\n                    dataSource={this.state.applicants.sort((a,b) => a.student_id - b.student_id)}\n                    renderItem={item => (\n\n                            <List.Item\n\n                                actions={[<a>status: {item.status}</a>,\n                                    <a onClick={e => {\n                                        CompanyService.approveApplication(this.state.id, item.student_id).then(response => {\n                                            message.success(\"success\")\n                                            this.refresh();\n                                        }).catch(error => {\n                                            message.error(\"failed\")\n                                        })\n                                    }} >accept</a>, <a\n                                    onClick={e =>{\n                                        if (item.status == \"pending\") {\n                                            CompanyService.rejectApplication(this.state.id, item.student_id).then(response => {\n                                                message.success(\"success\")\n                                                this.refresh()\n                                            }).catch(error => {\n                                                message.error(\"failed\")\n                                            })\n                                        } else {\n                                            message.error(\"You can't decline a already approved or declined student\")\n                                        }\n                                    }}>decline</a>]}\n                            >\n\n                            <Skeleton avatar title={false} loading={item.loading} active>\n                                <List.Item.Meta\n                                    avatar={\n                                        <Avatar src={item.student.iconUrl} />\n                                    }\n                                    title={<CompanyStudentModal student={item} />}\n                                    description={item.student.institution}\n                                />\n\n                            </Skeleton>\n                        </List.Item>\n                    )}\n                    />\n            </div>\n        );\n    }\n}\n\nexport default CompanyProjectComponent;"]},"metadata":{},"sourceType":"module"}