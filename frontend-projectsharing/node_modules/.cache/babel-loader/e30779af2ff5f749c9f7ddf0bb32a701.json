{"ast":null,"code":"var _jsxFileName = \"/Users/luxx/Downloads/frontend-projectsharing/src/component/RegistrationPage.js\";\nimport React, { useState } from 'react';\nimport { Form, Input, Tooltip, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport TopNavBar from \"./TopNavBar\";\nconst {\n  Option\n} = Select;\nconst AutoCompleteOption = AutoComplete.Option;\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values);\n  };\n\n  const prefixSelector = /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"prefix\",\n    noStyle: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: 70\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"86\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"+86\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"87\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"+87\")));\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = value => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map(website => ({\n    label: website,\n    value: website\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopNavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    name: \"register\",\n    onFinish: onFinish,\n    initialValues: {\n      residence: ['zhejiang', 'hangzhou', 'xihu'],\n      prefix: '86'\n    },\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"email\",\n    label: \"E-mail\",\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"password\",\n    label: \"Password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }],\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input.Password, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"confirm\",\n    label: \"Confirm Password\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The two passwords that you entered do not match!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input.Password, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"nickname\",\n    label: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, \"Nickname\\xA0\", /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"What do you want others to call you?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(QuestionCircleOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }))),\n    rules: [{\n      required: true,\n      message: 'Please input your nickname!',\n      whitespace: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"residence\",\n    label: \"Habitual Residence\",\n    rules: [{\n      type: 'array',\n      required: true,\n      message: 'Please select your habitual residence!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Cascader, {\n    options: residences,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"phone\",\n    label: \"Phone Number\",\n    rules: [{\n      required: true,\n      message: 'Please input your phone number!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    addonBefore: prefixSelector,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"website\",\n    label: \"Website\",\n    rules: [{\n      required: true,\n      message: 'Please input website!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    options: websiteOptions,\n    onChange: onWebsiteChange,\n    placeholder: \"website\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Captcha\",\n    extra: \"We must make sure that your are a human.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"captcha\",\n    noStyle: true,\n    rules: [{\n      required: true,\n      message: 'Please input the captcha you got!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 25\n    }\n  }, \"Get captcha\")))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({\n    name: \"agreement\",\n    valuePropName: \"checked\",\n    rules: [{\n      validator: (_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement')\n    }]\n  }, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, \"I have read the \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 37\n    }\n  }, \"agreement\"))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }, \"Register\"))));\n};\n\nexport default RegistrationForm;","map":{"version":3,"sources":["/Users/luxx/Downloads/frontend-projectsharing/src/component/RegistrationPage.js"],"names":["React","useState","Form","Input","Tooltip","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","QuestionCircleOutlined","TopNavBar","Option","AutoCompleteOption","residences","value","label","children","RegistrationForm","form","useForm","onFinish","values","console","log","prefixSelector","width","autoCompleteResult","setAutoCompleteResult","onWebsiteChange","map","domain","websiteOptions","website","residence","prefix","type","message","required","getFieldValue","validator","rule","Promise","resolve","reject","whitespace","_","tailFormItemLayout"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Form,\n    Input,\n    Tooltip,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    AutoComplete,\n} from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport TopNavBar from \"./TopNavBar\";\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [\n    {\n        value: 'zhejiang',\n        label: 'Zhejiang',\n        children: [\n            {\n                value: 'hangzhou',\n                label: 'Hangzhou',\n                children: [\n                    {\n                        value: 'xihu',\n                        label: 'West Lake',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        value: 'jiangsu',\n        label: 'Jiangsu',\n        children: [\n            {\n                value: 'nanjing',\n                label: 'Nanjing',\n                children: [\n                    {\n                        value: 'zhonghuamen',\n                        label: 'Zhong Hua Men',\n                    },\n                ],\n            },\n        ],\n    },\n];\n\n\n\nconst RegistrationForm = () => {\n    const [form] = Form.useForm();\n\n    const onFinish = values => {\n        console.log('Received values of form: ', values);\n    };\n\n    const prefixSelector = (\n        <Form.Item name=\"prefix\" noStyle>\n            <Select style={{ width: 70 }}>\n                <Option value=\"86\">+86</Option>\n                <Option value=\"87\">+87</Option>\n            </Select>\n        </Form.Item>\n    );\n\n    const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n    const onWebsiteChange = value => {\n        if (!value) {\n            setAutoCompleteResult([]);\n        } else {\n            setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n        }\n    };\n\n    const websiteOptions = autoCompleteResult.map(website => ({\n        label: website,\n        value: website,\n    }));\n\n    return (\n        <div className=\"App\">\n        <TopNavBar />\n        <Form\n            form={form}\n            name=\"register\"\n            onFinish={onFinish}\n            initialValues={{\n                residence: ['zhejiang', 'hangzhou', 'xihu'],\n                prefix: '86',\n            }}\n            scrollToFirstError\n        >\n            <Form.Item\n                name=\"email\"\n                label=\"E-mail\"\n                rules={[\n                    {\n                        type: 'email',\n                        message: 'The input is not valid E-mail!',\n                    },\n                    {\n                        required: true,\n                        message: 'Please input your E-mail!',\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                name=\"password\"\n                label=\"Password\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please input your password!',\n                    },\n                ]}\n                hasFeedback\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                name=\"confirm\"\n                label=\"Confirm Password\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please confirm your password!',\n                    },\n                    ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                            if (!value || getFieldValue('password') === value) {\n                                return Promise.resolve();\n                            }\n                            return Promise.reject('The two passwords that you entered do not match!');\n                        },\n                    }),\n                ]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                name=\"nickname\"\n                label={\n                    <span>\n            Nickname&nbsp;\n                        <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n                }\n                rules={[{ required: true, message: 'Please input your nickname!', whitespace: true }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                name=\"residence\"\n                label=\"Habitual Residence\"\n                rules={[\n                    { type: 'array', required: true, message: 'Please select your habitual residence!' },\n                ]}\n            >\n                <Cascader options={residences} />\n            </Form.Item>\n\n            <Form.Item\n                name=\"phone\"\n                label=\"Phone Number\"\n                rules={[{ required: true, message: 'Please input your phone number!' }]}\n            >\n                <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item\n                name=\"website\"\n                label=\"Website\"\n                rules={[{ required: true, message: 'Please input website!' }]}\n            >\n                <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder=\"website\">\n                    <Input />\n                </AutoComplete>\n            </Form.Item>\n\n            <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n                <Row gutter={8}>\n                    <Col span={12}>\n                        <Form.Item\n                            name=\"captcha\"\n                            noStyle\n                            rules={[{ required: true, message: 'Please input the captcha you got!' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                        <Button>Get captcha</Button>\n                    </Col>\n                </Row>\n            </Form.Item>\n\n            <Form.Item\n                name=\"agreement\"\n                valuePropName=\"checked\"\n                rules={[\n                    { validator:(_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement') },\n                ]}\n                {...tailFormItemLayout}\n            >\n                <Checkbox>\n                    I have read the <a href=\"\">agreement</a>\n                </Checkbox>\n            </Form.Item>\n            <Form.Item {...tailFormItemLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Register\n                </Button>\n            </Form.Item>\n        </Form>\n        </div>\n    );\n};\n\nexport default RegistrationForm;"]},"metadata":{},"sourceType":"module"}