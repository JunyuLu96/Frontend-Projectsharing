{"ast":null,"code":"var _jsxFileName = \"/Users/luxx/Downloads/frontend-projectsharing/src/component/RegistrationPage.js\";\nimport React, { Component, useState } from \"react\";\nimport TopNavBar from \"./TopNavBar\";\nimport LoginForm from \"./LoginForm\";\nimport { Form, Input, Tooltip, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nconst AutoCompleteOption = AutoComplete.Option;\nconst {\n  Option\n} = Select;\n\nclass RegistrationPage extends Component {\n  render() {\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n\n    const RegistrationForm = () => {\n      const [form] = Form.useForm();\n\n      const onFinish = values => {\n        console.log('Received values of form: ', values);\n      };\n\n      const prefixSelector = /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"prefix\",\n        noStyle: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        style: {\n          width: 70\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Option, {\n        value: \"86\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }, \"+86\"), /*#__PURE__*/React.createElement(Option, {\n        value: \"87\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }, \"+87\")));\n      const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n      const onWebsiteChange = value => {\n        if (!value) {\n          setAutoCompleteResult([]);\n        } else {\n          setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n        }\n      };\n\n      const websiteOptions = autoCompleteResult.map(website => ({\n        label: website,\n        value: website\n      }));\n      return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n        form: form,\n        name: \"register\",\n        onFinish: onFinish,\n        initialValues: {\n          residence: ['zhejiang', 'hangzhou', 'xihu'],\n          prefix: '86'\n        },\n        scrollToFirstError: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"email\",\n        label: \"E-mail\",\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"password\",\n        label: \"Password\",\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }],\n        hasFeedback: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input.Password, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"confirm\",\n        label: \"Confirm Password\",\n        dependencies: ['password'],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(rule, value) {\n            if (!value || getFieldValue('password') === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject('The two passwords that you entered do not match!');\n          }\n\n        })],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input.Password, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"nickname\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }\n        }, \"Nickname\\xA0\", /*#__PURE__*/React.createElement(Tooltip, {\n          title: \"What do you want others to call you?\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(QuestionCircleOutlined, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }\n        }))),\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"residence\",\n        label: \"Habitual Residence\",\n        rules: [{\n          type: 'array',\n          required: true,\n          message: 'Please select your habitual residence!'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Cascader, {\n        options: residences,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"phone\",\n        label: \"Phone Number\",\n        rules: [{\n          required: true,\n          message: 'Please input your phone number!'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        addonBefore: prefixSelector,\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"website\",\n        label: \"Website\",\n        rules: [{\n          required: true,\n          message: 'Please input website!'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(AutoComplete, {\n        options: websiteOptions,\n        onChange: onWebsiteChange,\n        placeholder: \"website\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Item, {\n        label: \"Captcha\",\n        extra: \"We must make sure that your are a human.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        gutter: 8,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"captcha\",\n        noStyle: true,\n        rules: [{\n          required: true,\n          message: 'Please input the captcha you got!'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 33\n        }\n      }, \"Get captcha\")))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({\n        name: \"agreement\",\n        valuePropName: \"checked\",\n        rules: [{\n          validator: (_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement')\n        }]\n      }, tailFormItemLayout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Checkbox, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }\n      }, \"I have read the \", /*#__PURE__*/React.createElement(\"a\", {\n        href: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 45\n        }\n      }, \"agreement\"))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }\n      }, \"Register\")));\n    };\n  }\n\n}\n\nexport default RegistrationPage;","map":{"version":3,"sources":["/Users/luxx/Downloads/frontend-projectsharing/src/component/RegistrationPage.js"],"names":["React","Component","useState","TopNavBar","LoginForm","Form","Input","Tooltip","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","QuestionCircleOutlined","AutoCompleteOption","Option","RegistrationPage","render","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","form","useForm","onFinish","values","console","log","prefixSelector","width","autoCompleteResult","setAutoCompleteResult","onWebsiteChange","value","map","domain","websiteOptions","website","label","residence","prefix","type","message","required","getFieldValue","validator","rule","Promise","resolve","reject","whitespace","residences","_"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SACIC,IADJ,EAEIC,KAFJ,EAGIC,OAHJ,EAIIC,QAJJ,EAKIC,MALJ,EAMIC,GANJ,EAOIC,GAPJ,EAQIC,QARJ,EASIC,MATJ,EAUIC,YAVJ,QAWO,MAXP;AAYA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,MAAMC,kBAAkB,GAAGF,YAAY,CAACG,MAAxC;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaR,MAAnB;;AAEA,MAAMS,gBAAN,SAA+BjB,SAA/B,CAAyC;AACrCkB,EAAAA,MAAM,GAAG;AAIL,UAAMC,cAAc,GAAG;AACnBC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADE;AAENC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFE,OADS;AAKnBE,MAAAA,UAAU,EAAE;AACRH,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAERC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFI;AALO,KAAvB;AAUA,UAAMG,kBAAkB,GAAG;AACvBD,MAAAA,UAAU,EAAE;AACRH,QAAAA,EAAE,EAAE;AACAC,UAAAA,IAAI,EAAE,EADN;AAEAI,UAAAA,MAAM,EAAE;AAFR,SADI;AAKRH,QAAAA,EAAE,EAAE;AACAD,UAAAA,IAAI,EAAE,EADN;AAEAI,UAAAA,MAAM,EAAE;AAFR;AALI;AADW,KAA3B;;AAaA,UAAMC,gBAAgB,GAAG,MAAM;AAC3B,YAAM,CAACC,IAAD,IAASxB,IAAI,CAACyB,OAAL,EAAf;;AAEA,YAAMC,QAAQ,GAAGC,MAAM,IAAI;AACvBC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACH,OAFD;;AAIA,YAAMG,cAAc,gBAChB,oBAAC,IAAD,CAAM,IAAN;AAAW,QAAA,IAAI,EAAC,QAAhB;AAAyB,QAAA,OAAO,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CADJ,CADJ;AASA,YAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CpC,QAAQ,CAAC,EAAD,CAA5D;;AAEA,YAAMqC,eAAe,GAAGC,KAAK,IAAI;AAC7B,YAAI,CAACA,KAAL,EAAY;AACRF,UAAAA,qBAAqB,CAAC,EAAD,CAArB;AACH,SAFD,MAEO;AACHA,UAAAA,qBAAqB,CAAC,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyBG,GAAzB,CAA6BC,MAAM,IAAK,GAAEF,KAAM,GAAEE,MAAO,EAAzD,CAAD,CAArB;AACH;AACJ,OAND;;AAQA,YAAMC,cAAc,GAAGN,kBAAkB,CAACI,GAAnB,CAAuBG,OAAO,KAAK;AACtDC,QAAAA,KAAK,EAAED,OAD+C;AAEtDJ,QAAAA,KAAK,EAAEI;AAF+C,OAAL,CAA9B,CAAvB;AAIA,0BACI,oBAAC,IAAD,oBACQxB,cADR;AAEI,QAAA,IAAI,EAAES,IAFV;AAGI,QAAA,IAAI,EAAC,UAHT;AAII,QAAA,QAAQ,EAAEE,QAJd;AAKI,QAAA,aAAa,EAAE;AACXe,UAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,MAAzB,CADA;AAEXC,UAAAA,MAAM,EAAE;AAFG,SALnB;AASI,QAAA,kBAAkB,MATtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAWI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,KAAK,EAAC,QAFV;AAGI,QAAA,KAAK,EAAE,CACH;AACIC,UAAAA,IAAI,EAAE,OADV;AAEIC,UAAAA,OAAO,EAAE;AAFb,SADG,EAKH;AACIC,UAAAA,QAAQ,EAAE,IADd;AAEID,UAAAA,OAAO,EAAE;AAFb,SALG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAcI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdJ,CAXJ,eA4BI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,KAAK,EAAC,UAFV;AAGI,QAAA,KAAK,EAAE,CACH;AACIC,UAAAA,QAAQ,EAAE,IADd;AAEID,UAAAA,OAAO,EAAE;AAFb,SADG,CAHX;AASI,QAAA,WAAW,MATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAWI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,CA5BJ,eA0CI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,KAAK,EAAC,kBAFV;AAGI,QAAA,YAAY,EAAE,CAAC,UAAD,CAHlB;AAII,QAAA,WAAW,MAJf;AAKI,QAAA,KAAK,EAAE,CACH;AACIC,UAAAA,QAAQ,EAAE,IADd;AAEID,UAAAA,OAAO,EAAE;AAFb,SADG,EAKH,CAAC;AAACE,UAAAA;AAAD,SAAD,MAAsB;AAClBC,UAAAA,SAAS,CAACC,IAAD,EAAOb,KAAP,EAAc;AACnB,gBAAI,CAACA,KAAD,IAAUW,aAAa,CAAC,UAAD,CAAb,KAA8BX,KAA5C,EAAmD;AAC/C,qBAAOc,OAAO,CAACC,OAAR,EAAP;AACH;;AACD,mBAAOD,OAAO,CAACE,MAAR,CAAe,kDAAf,CAAP;AACH;;AANiB,SAAtB,CALG,CALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAoBI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBJ,CA1CJ,eAiEI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,KAAK,eACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAEI,oBAAC,OAAD;AAAS,UAAA,KAAK,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAClB,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADkB,CAFJ,CAHR;AAUI,QAAA,KAAK,EAAE,CAAC;AAACN,UAAAA,QAAQ,EAAE,IAAX;AAAiBD,UAAAA,OAAO,EAAE,6BAA1B;AAAyDQ,UAAAA,UAAU,EAAE;AAArE,SAAD,CAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAYI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZJ,CAjEJ,eAgFI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,WADT;AAEI,QAAA,KAAK,EAAC,oBAFV;AAGI,QAAA,KAAK,EAAE,CACH;AAACT,UAAAA,IAAI,EAAE,OAAP;AAAgBE,UAAAA,QAAQ,EAAE,IAA1B;AAAgCD,UAAAA,OAAO,EAAE;AAAzC,SADG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOI,oBAAC,QAAD;AAAU,QAAA,OAAO,EAAES,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,CAhFJ,eA0FI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,KAAK,EAAC,cAFV;AAGI,QAAA,KAAK,EAAE,CAAC;AAACR,UAAAA,QAAQ,EAAE,IAAX;AAAiBD,UAAAA,OAAO,EAAE;AAA1B,SAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKI,oBAAC,KAAD;AAAO,QAAA,WAAW,EAAEd,cAApB;AAAoC,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CA1FJ,eAkGI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,KAAK,EAAE,CAAC;AAACc,UAAAA,QAAQ,EAAE,IAAX;AAAiBD,UAAAA,OAAO,EAAE;AAA1B,SAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKI,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAEN,cAAvB;AAAuC,QAAA,QAAQ,EAAEJ,eAAjD;AAAkE,QAAA,WAAW,EAAC,SAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,CAlGJ,eA4GI,oBAAC,IAAD,CAAM,IAAN;AAAW,QAAA,KAAK,EAAC,SAAjB;AAA2B,QAAA,KAAK,EAAC,0CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAE,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,OAAO,MAFX;AAGI,QAAA,KAAK,EAAE,CAAC;AAACW,UAAAA,QAAQ,EAAE,IAAX;AAAiBD,UAAAA,OAAO,EAAE;AAA1B,SAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ,CADJ,eAUI,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CAVJ,CADJ,CA5GJ,eA6HI,oBAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAC,WADT;AAEI,QAAA,aAAa,EAAC,SAFlB;AAGI,QAAA,KAAK,EAAE,CACH;AAACG,UAAAA,SAAS,EAAE,CAACO,CAAD,EAAInB,KAAJ,KAAcA,KAAK,GAAGc,OAAO,CAACC,OAAR,EAAH,GAAuBD,OAAO,CAACE,MAAR,CAAe,yBAAf;AAAtD,SADG;AAHX,SAMQ9B,kBANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAQI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACoB;AAAG,QAAA,IAAI,EAAC,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADpB,CARJ,CA7HJ,eAyII,oBAAC,IAAD,CAAM,IAAN,oBAAeA,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAzIJ,CADJ;AAiJH,KA/KD;AAgLH;;AA5MoC;;AA+MzC,eAAeR,gBAAf","sourcesContent":["import React, { Component, useState } from \"react\";\nimport TopNavBar from \"./TopNavBar\";\nimport LoginForm from \"./LoginForm\";\nimport {\n    Form,\n    Input,\n    Tooltip,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    AutoComplete,\n} from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst { Option } = Select;\n\nclass RegistrationPage extends Component {\n    render() {\n\n        \n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        const RegistrationForm = () => {\n            const [form] = Form.useForm();\n\n            const onFinish = values => {\n                console.log('Received values of form: ', values);\n            };\n\n            const prefixSelector = (\n                <Form.Item name=\"prefix\" noStyle>\n                    <Select style={{width: 70}}>\n                        <Option value=\"86\">+86</Option>\n                        <Option value=\"87\">+87</Option>\n                    </Select>\n                </Form.Item>\n            );\n\n            const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n            const onWebsiteChange = value => {\n                if (!value) {\n                    setAutoCompleteResult([]);\n                } else {\n                    setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n                }\n            };\n\n            const websiteOptions = autoCompleteResult.map(website => ({\n                label: website,\n                value: website,\n            }));\n            return (\n                <Form\n                    {...formItemLayout}\n                    form={form}\n                    name=\"register\"\n                    onFinish={onFinish}\n                    initialValues={{\n                        residence: ['zhejiang', 'hangzhou', 'xihu'],\n                        prefix: '86',\n                    }}\n                    scrollToFirstError\n                >\n                    <Form.Item\n                        name=\"email\"\n                        label=\"E-mail\"\n                        rules={[\n                            {\n                                type: 'email',\n                                message: 'The input is not valid E-mail!',\n                            },\n                            {\n                                required: true,\n                                message: 'Please input your E-mail!',\n                            },\n                        ]}\n                    >\n                        <Input/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"password\"\n                        label=\"Password\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                        ]}\n                        hasFeedback\n                    >\n                        <Input.Password/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"confirm\"\n                        label=\"Confirm Password\"\n                        dependencies={['password']}\n                        hasFeedback\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            ({getFieldValue}) => ({\n                                validator(rule, value) {\n                                    if (!value || getFieldValue('password') === value) {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject('The two passwords that you entered do not match!');\n                                },\n                            }),\n                        ]}\n                    >\n                        <Input.Password/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"nickname\"\n                        label={\n                            <span>\n            Nickname&nbsp;\n                                <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined/>\n            </Tooltip>\n          </span>\n                        }\n                        rules={[{required: true, message: 'Please input your nickname!', whitespace: true}]}\n                    >\n                        <Input/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"residence\"\n                        label=\"Habitual Residence\"\n                        rules={[\n                            {type: 'array', required: true, message: 'Please select your habitual residence!'},\n                        ]}\n                    >\n                        <Cascader options={residences}/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"phone\"\n                        label=\"Phone Number\"\n                        rules={[{required: true, message: 'Please input your phone number!'}]}\n                    >\n                        <Input addonBefore={prefixSelector} style={{width: '100%'}}/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"website\"\n                        label=\"Website\"\n                        rules={[{required: true, message: 'Please input website!'}]}\n                    >\n                        <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder=\"website\">\n                            <Input/>\n                        </AutoComplete>\n                    </Form.Item>\n\n                    <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n                        <Row gutter={8}>\n                            <Col span={12}>\n                                <Form.Item\n                                    name=\"captcha\"\n                                    noStyle\n                                    rules={[{required: true, message: 'Please input the captcha you got!'}]}\n                                >\n                                    <Input/>\n                                </Form.Item>\n                            </Col>\n                            <Col span={12}>\n                                <Button>Get captcha</Button>\n                            </Col>\n                        </Row>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"agreement\"\n                        valuePropName=\"checked\"\n                        rules={[\n                            {validator: (_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement')},\n                        ]}\n                        {...tailFormItemLayout}\n                    >\n                        <Checkbox>\n                            I have read the <a href=\"\">agreement</a>\n                        </Checkbox>\n                    </Form.Item>\n                    <Form.Item {...tailFormItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Register\n                        </Button>\n                    </Form.Item>\n                </Form>\n            );\n        }\n    }\n}\n\nexport default RegistrationPage;"]},"metadata":{},"sourceType":"module"}