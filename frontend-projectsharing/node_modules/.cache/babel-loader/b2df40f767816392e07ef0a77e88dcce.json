{"ast":null,"code":"var _jsxFileName = \"/Users/luxx/Desktop/frontend-projectsharing/src/component/main/RegistrationForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Input, Tooltip, Select } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport Checkbox from \"antd/es/checkbox\";\nimport Button from \"antd/es/button\";\nimport AuthenticationService from \"./AuthenticationService\";\nimport { withRouter } from 'react-router-dom';\nconst {\n  Option\n} = Select;\n\nclass RegistrationForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      role: \"student\",\n      error: undefined,\n      help: undefined\n    };\n    this.onFinish = this.onFinish.bind(this);\n  }\n\n  onFinish(values) {\n    AuthenticationService.signUp(values).then(response => {\n      this.props.history.push(`/login`);\n    }).catch(error => {\n      console.log(error);\n      this.setState({\n        error: 'error',\n        help: 'email or username has been taken!'\n      });\n    });\n  }\n\n  render() {\n    const formItemLayout = {\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 8\n      }\n    };\n\n    function isSimplePwd(s) {\n      if (s.length < 8) {\n        return 0;\n      }\n\n      var ls = 0;\n\n      if (s.length >= 8) {\n        ls++;\n      }\n\n      if (s.match(/([a-z])+/)) {\n        ls++;\n      }\n\n      if (s.match(/([0-9])+/)) {\n        ls++;\n      }\n\n      if (s.match(/([A-Z])+/)) {\n        ls++;\n      }\n\n      if (s.match(/[^a-zA-Z0-9]+/)) {\n        ls++;\n      }\n\n      return ls;\n    }\n\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 5,\n          offset: 7\n        }\n      }\n    };\n\n    function isLowLetter(a) {\n      if (a.match(/([a-z])+/)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function isUpperLetter(a) {\n      if (a.match(/([A-Z])+/)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function isNum(a) {\n      if (a.match(/([0-9])+/)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function isSpecial(a) {\n      if (a.match(/[^a-zA-Z0-9]+/)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    const prefixSelector = /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"prefix\",\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"+1\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"86\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, \"+86\")));\n    return /*#__PURE__*/React.createElement(Form, Object.assign({\n      name: \"validate_other\"\n    }, formItemLayout, {\n      onFinish: this.onFinish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      validateStatus: this.state.error,\n      help: this.state.help,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"userType\",\n      label: \"Sign up as\",\n      hasFeedback: true,\n      rules: [{\n        required: true,\n        message: 'Please select your role!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      placeholder: \"Sign up as a student or a company?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      value: \"student\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }, \"Student\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"company\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, \"Company\"))), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"email\",\n      label: \"E-mail\",\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (value !== \"jl9829@nyu.edu\") {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('This email has been taken!');\n        }\n\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      autoComplete: \"new-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"password\",\n      label: \"Password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          const score = isSimplePwd(value);\n\n          if (score < 5) {\n            if (value.length < 8) {\n              return Promise.reject('Minimum length is 8');\n            } else if (!isLowLetter(value)) {\n              return Promise.reject('Require lowercase letter');\n            } else if (!isUpperLetter(value)) {\n              return Promise.reject('Require lowercase letter');\n            } else if (!isNum(value)) {\n              return Promise.reject('Require numbers');\n            }\n          }\n\n          return Promise.resolve();\n        }\n\n      })],\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input.Password, {\n      autoComplete: \"new-password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"confirm\",\n      label: \"Confirm Password\",\n      dependencies: ['password'],\n      hasFeedback: true,\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (!value || getFieldValue('password') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('The two passwords that you entered do not match!');\n        }\n\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input.Password, {\n      autoComplete: \"new-password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"username\",\n      label: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }\n      }, \"Username\\xA0\", /*#__PURE__*/React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(QuestionCircleOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }\n      }))),\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (value.length < 5) {\n            return Promise.reject('Minimum length is 5');\n          }\n\n          return Promise.resolve();\n        }\n\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"phoneNum\",\n      label: \"Phone Number\",\n      rules: [{\n        required: false,\n        message: 'Please input your phone number!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({\n      name: \"agreement\",\n      valuePropName: \"checked\",\n      rules: [{\n        validator: (_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement')\n      }]\n    }, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, \"I have read the \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 41\n      }\n    }, \"agreement\"))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    }, \"Register\")));\n  }\n\n}\n\nexport default withRouter(RegistrationForm);","map":{"version":3,"sources":["/Users/luxx/Desktop/frontend-projectsharing/src/component/main/RegistrationForm.js"],"names":["React","Component","Form","Input","Tooltip","Select","QuestionCircleOutlined","Checkbox","Button","AuthenticationService","withRouter","Option","RegistrationForm","constructor","props","state","role","error","undefined","help","onFinish","bind","values","signUp","then","response","history","push","catch","console","log","setState","render","formItemLayout","labelCol","span","wrapperCol","isSimplePwd","s","length","ls","match","tailFormItemLayout","xs","offset","sm","isLowLetter","a","isUpperLetter","isNum","isSpecial","prefixSelector","width","required","message","type","getFieldValue","validator","rule","value","Promise","resolve","reject","score","whitespace","_"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Form,\n    Input,\n    Tooltip,\n    Select,\n} from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport Checkbox from \"antd/es/checkbox\";\nimport Button from \"antd/es/button\";\nimport AuthenticationService from \"./AuthenticationService\";\nimport {withRouter} from 'react-router-dom';\n\nconst {Option} = Select;\n\nclass RegistrationForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            role: \"student\",\n            error: undefined,\n            help: undefined,\n        }\n        this.onFinish = this.onFinish.bind(this);\n\n\n    }\n    onFinish(values) {\n        AuthenticationService.signUp(values).then(response => {\n            this.props.history.push(`/login`)\n        }).catch(error => {\n            console.log(error)\n            this.setState({\n                error: 'error',\n                help: 'email or username has been taken!',\n            })\n        })\n    }\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 8},\n        };\n        function isSimplePwd(s) {\n            if (s.length < 8) {\n                return 0;\n            }\n            var ls = 0;\n            if (s.length >= 8) {\n                ls++;\n            }\n            if (s.match(/([a-z])+/)) {\n                ls++;\n            }\n            if (s.match(/([0-9])+/)) {\n                ls++;\n            }\n            if (s.match(/([A-Z])+/)) {\n                ls++;\n            }\n            if (s.match(/[^a-zA-Z0-9]+/)) {\n                ls++;\n            }\n            return ls;\n        }\n\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 5,\n                    offset: 7,\n                },\n            },\n        };\n\n        function isLowLetter(a) {\n            if (a.match(/([a-z])+/)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        function isUpperLetter(a) {\n            if (a.match(/([A-Z])+/)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        function isNum(a) {\n            if (a.match(/([0-9])+/)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        function isSpecial(a) {\n            if (a.match(/[^a-zA-Z0-9]+/)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        const prefixSelector = (\n            <Form.Item name=\"prefix\" noStyle>\n                <Select style={{ width: 70 }}>\n                    <Option value=\"1\">+1</Option>\n                    <Option value=\"86\">+86</Option>\n                </Select>\n            </Form.Item>\n        );\n        return (\n            <Form\n                name=\"validate_other\"\n                {...formItemLayout}\n                onFinish={this.onFinish}\n            >\n                <Form.Item\n                    validateStatus={this.state.error}\n                    help={this.state.help}\n                ></Form.Item>\n                <Form.Item\n                    name=\"userType\"\n                    label=\"Sign up as\"\n                    hasFeedback\n                    rules={[{required: true, message: 'Please select your role!'}]}\n                >\n                    <Select placeholder=\"Sign up as a student or a company?\">\n                        <Option value=\"student\">Student</Option>\n                        <Option value=\"company\">Company</Option>\n                    </Select>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"email\"\n                    label=\"E-mail\"\n                    rules={[\n                        {\n                            type: 'email',\n                            message: 'The input is not valid E-mail!',\n                        },\n                        {\n                            required: true,\n                            message: 'Please input your E-mail!',\n                        },\n                        ({getFieldValue}) => (\n                            {\n                                validator(rule, value) {\n                                    if (value !== \"jl9829@nyu.edu\") {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject('This email has been taken!');\n                                },\n                            }),\n                    ]}\n\n                >\n                    <Input autoComplete=\"new-user\"/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"password\"\n                    label=\"Password\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your password!',\n                        },\n                        ({getFieldValue}) => (\n                            {\n                                validator(rule, value) {\n                                    const score = isSimplePwd(value)\n                                    if (score < 5) {\n                                        if (value.length < 8) {\n                                            return Promise.reject('Minimum length is 8');\n                                        } else if (!isLowLetter(value)) {\n                                            return Promise.reject('Require lowercase letter');\n                                        } else if (!isUpperLetter(value)) {\n                                            return Promise.reject('Require lowercase letter');\n                                        } else if (!isNum(value)) {\n                                            return Promise.reject('Require numbers')\n                                        }\n                                    }\n                                    return Promise.resolve();\n                                }\n                            }),\n                    ]}\n                    hasFeedback\n                >\n                    <Input.Password autoComplete=\"new-password\"/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"confirm\"\n                    label=\"Confirm Password\"\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please confirm your password!',\n                        },\n                        ({getFieldValue}) => ({\n                            validator(rule, value) {\n                                if (!value || getFieldValue('password') === value) {\n                                    return Promise.resolve();\n                                }\n                                return Promise.reject('The two passwords that you entered do not match!');\n                            },\n                        }),\n                    ]}\n                >\n                    <Input.Password autoComplete=\"new-password\"/>\n                </Form.Item>\n                <Form.Item\n                    name=\"username\"\n                    label={\n                        <span>\n            Username&nbsp;\n                            <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined/>\n            </Tooltip>\n          </span>\n                    }\n                    rules={[\n                        {\n                            required: true, message: 'Please input your nickname!', whitespace: true\n                        },\n                        ({getFieldValue}) => (\n                            {\n                                validator(rule, value) {\n\n                                    if (value.length < 5) {\n                                        return Promise.reject('Minimum length is 5');\n                                    }\n                                    return Promise.resolve();\n                                }\n                            }),\n                        ]}\n                >\n                    <Input/>\n                </Form.Item>\n                <Form.Item\n                    name=\"phoneNum\"\n                    label=\"Phone Number\"\n                    rules={[{ required: false, message: 'Please input your phone number!' }]}\n                >\n                    <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n                </Form.Item>\n                <Form.Item\n                    name=\"agreement\"\n                    valuePropName=\"checked\"\n                    rules={[\n                        { validator:(_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement') },\n                    ]}\n                    {...tailFormItemLayout}\n                >\n                    <Checkbox>\n                        I have read the <a href=\"\">agreement</a>\n                    </Checkbox>\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                </Form.Item>\n            </Form>\n        )\n    }\n\n}\n\nexport default withRouter(RegistrationForm);"]},"metadata":{},"sourceType":"module"}